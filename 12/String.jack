// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let length = 0;
        let str = Memory.alloc(maxLength);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(str);
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return Memory.peek(str+j);
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        do Memory.poke(str+j,c);
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        do Memory.poke(str+length,c);
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length -1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int v,i,d,sign;
        let v = 0;
        let i = 0;
        let sign = 1;
        if (charAt(0) = 45){
            let sign = -1;
            let i = 1;
        }

        while(i < length()){
            let d = charAt(i) - 48;
            if((d < 0) | (d > 10)){
                return v * sign;
            }
            let v = (v * 10) + d;
            let i = i + 1;
        }
        return v * sign;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let length = String.intLength(val);
        do setIntHelper(0,val);
        return;
    }

    method void setIntHelper(int index, int val) {
        var int c;

        if(val < 0){
            do setCharAt(0,45);
            do setIntHelper(0, Math.abs(val));
            return;
        }

        let c = (val - (10 * (val/10))) + 48;
        do setCharAt(length-index-1,c);
        if (val < 10){
            return;
        }
        do setIntHelper(index+1, val/10);

        return;
    }

    function int intLength(int val){
        var int res;
        let res = 0;

        if(val < 0){
            return String.intLength(Math.abs(val)) + 1;
        }

        if(val=0){
            return 1;
        }

        while(~(val=0)) {
            let val = val / 10;
            let res = res + 1;
        }
        return res;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}

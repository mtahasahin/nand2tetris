// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int val,i;
        let val = 1;
        let i = 0;

        let twoToThe = Array.new(16);
        while(i < 16){
            let twoToThe[i] = val;
            let val = val + val;
            let i = i + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x < 0) {
            return -x;
        }
        return x;
    }

    function bool bit(int x, int j) {
        return x & twoToThe[j];
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum,shiftedX,i;
        let sum = 0;
        let i = 0;
        let shiftedX = x;

        while (i < 16) {
            if (Math.bit(y,i)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }

        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q;
        var int sign;

        if(((x < 0) & (y > 0)) | ((x > 0) & (y < 0))){
            let sign = -1;
        } else {
            let sign = 1;
        }

        let x = Math.abs(x);
        let y = Math.abs(y);

        if (y > x) {
            return 0;
        }

        if(y * 2 < 0){
            let q = 0;
        } else {
            let q = Math.divide(x, y * 2);
        }

        if((x - (2 * q * y)) < y) {
            return 2 * q * sign;
        }
        return ((2 * q) + 1) * sign;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y,j,val;
        let y = 0;
        let j = 7;
        while ( (j > 0) | (j = 0) ) {
            let val = (y + twoToThe[j]) * (y + twoToThe[j]);
            if (((val < x) | (val = x)) & (val > 0)){
                let y = y + twoToThe[j];
            }
            let j = j-1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if(a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if(a < b) {
            return a;
        }
        return b;
    }
}
